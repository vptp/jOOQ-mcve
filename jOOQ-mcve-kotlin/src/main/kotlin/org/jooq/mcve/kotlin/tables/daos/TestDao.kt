/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.jooq.mcve.kotlin.tables.Test
import org.jooq.mcve.kotlin.tables.pojos.TestPojo
import org.jooq.mcve.kotlin.tables.records.TestRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestDao(configuration: Configuration?) : DAOImpl<TestRecord, TestPojo, Int>(Test.TEST, TestPojo::class.java, configuration) {

    /**
     * Create a new TestDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: TestPojo): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<TestPojo> = fetchRange(Test.TEST.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<TestPojo> = fetch(Test.TEST.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): TestPojo? = fetchOne(Test.TEST.ID, value)

    /**
     * Fetch records that have <code>cd BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCd(lowerInclusive: Int?, upperInclusive: Int?): List<TestPojo> = fetchRange(Test.TEST.CD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cd IN (values)</code>
     */
    fun fetchByCd(vararg values: Int): List<TestPojo> = fetch(Test.TEST.CD, *values.toTypedArray())
}
